//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IWcfService")]
    public interface IWcfService
    {
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/UserExist", ReplyAction="http://tempuri.org/IWcfService/UserExistResponse")]
        System.Threading.Tasks.Task<bool> UserExistAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/CreateUser", ReplyAction="http://tempuri.org/IWcfService/CreateUserResponse")]
        System.Threading.Tasks.Task<string> CreateUserAsync(string name, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetInfo", ReplyAction="http://tempuri.org/IWcfService/GetInfoResponse")]
        System.Threading.Tasks.Task<string> GetInfoAsync(string name, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/EditInfo", ReplyAction="http://tempuri.org/IWcfService/EditInfoResponse")]
        System.Threading.Tasks.Task<string> EditInfoAsync(string name, string tag, string newval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/FindByName", ReplyAction="http://tempuri.org/IWcfService/FindByNameResponse")]
        System.Threading.Tasks.Task<List<string>> FindByNameAsync(string name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IWcfService/UserExist", ReplyAction = "http://tempuri.org/IWcfService/UserExistResponse")]
        bool UserExist(string name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IWcfService/CreateUser", ReplyAction = "http://tempuri.org/IWcfService/CreateUserResponse")]
        string CreateUser(string name, string pass);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IWcfService/GetInfo", ReplyAction = "http://tempuri.org/IWcfService/GetInfoResponse")]
        string GetInfo(string name, string tag);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IWcfService/EditInfo", ReplyAction = "http://tempuri.org/IWcfService/EditInfoResponse")]
        string EditInfo(string name, string tag, string newval);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IWcfService/FindByName", ReplyAction = "http://tempuri.org/IWcfService/FindByNameResponse")]
        List<string> FindByName(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface IWcfServiceChannel : ServiceReference1.IWcfService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class WcfServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IWcfService>, ServiceReference1.IWcfService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WcfServiceClient() : 
                base(WcfServiceClient.GetDefaultBinding(), WcfServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWcfService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(WcfServiceClient.GetBindingForEndpoint(endpointConfiguration), WcfServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WcfServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WcfServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> UserExistAsync(string name)
        {
            return base.Channel.UserExistAsync(name);
        }
        
        public System.Threading.Tasks.Task<string> CreateUserAsync(string name, string pass)
        {
            return base.Channel.CreateUserAsync(name, pass);
        }
        
        public System.Threading.Tasks.Task<string> GetInfoAsync(string name, string tag)
        {
            return base.Channel.GetInfoAsync(name, tag);
        }
        
        public System.Threading.Tasks.Task<string> EditInfoAsync(string name, string tag, string newval)
        {
            return base.Channel.EditInfoAsync(name, tag, newval);
        }
        
        public System.Threading.Tasks.Task<List<string>> FindByNameAsync(string name)
        {
            return base.Channel.FindByNameAsync(name);
        }

        public bool UserExist(string name)
        {
            return base.Channel.UserExist(name);
        }

        public string CreateUser(string name, string pass)
        {
            return base.Channel.CreateUser(name, pass);
        }

        public string GetInfo(string name, string tag)
        {
            return base.Channel.GetInfo(name, tag);
        }

        public string EditInfo(string name, string tag, string newval)
        {
            return base.Channel.EditInfo(name, tag, newval);
        }

        public List<string> FindByName(string name)
        {
            return base.Channel.FindByName(name);
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWcfService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWcfService))
            {
                return new System.ServiceModel.EndpointAddress("http://projectgpsdkk.somee.com/WcfService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WcfServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWcfService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WcfServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWcfService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IWcfService,
        }
    }
}
